<?xml version="1.0"?>
<launch>
  <!-- Gazebo 시작 -->
  <!-- GPU 가속화-->
  <env name="CUDA_VISIBLE_DEVICES" value="0"/>
  <env name="GAZEBO_GPU_RAY" value="1"/>
  <env name="SVGA_VGPU10" value="0"/>
  <!-- 환경 변수 설정 -->
  <env name="HUSKY_LMS1XX_ENABLED" value="false"/>
  <env name="HUSKY_UR5_ENABLED" value="false"/>
  <env name="GAZEBO_MODEL_PATH" value="$(find husky_custom_gazebo)/models:$(optenv GAZEBO_MODEL_PATH)"/>

  <!-- <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find husky_custom_gazebo)/worlds/custom_world.world"/>
    <arg name="paused" value="false"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui" value="true"/>
    <arg name="headless" value="false"/>
    <arg name="debug" value="false"/>
  </include> -->

  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" default="$(find husky_custom_gazebo)/worlds/citysim_gazebo.world"/>
    <arg name="paused" value="false"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui" value="true"/>
    <arg name="headless" value="false"/>
    <arg name="debug" value="false"/>
  </include>

  <!-- <arg name="multimaster" default="$(optenv ROBOT_MULTIMASTER false)"/> -->
  <arg name="simulation" default="$(optenv ROBOT_SIMULATION false)"/>
  <arg name="robot_namespace" default="$(optenv ROBOT_NAMESPACE robot)"/>
  <arg name="enable_ekf" default="$(optenv ENABLE_EKF true)"/>

  <arg name="config_extras"
       default="$(eval optenv('HUSKY_CONFIG_EXTRAS', find('husky_control') + '/config/empty.yaml'))"/>

  <!-- <include file="$(find multimaster_launch)/launch/multimaster_robot.launch" if="$(arg multimaster)">
    <arg name="gazebo_interface" value="$(find husky_control)/config/gazebo_interface.yaml" />
    <arg name="public_interface" value="$(find husky_control)/config/public_interface.yaml" />
    <arg name="robot_namespace" value="$(arg robot_namespace)"/>
    <arg name="simulation" value="$(arg simulation)"/>
  </include> -->

  <!-- Load robot description -->
  <include file="$(find husky_description)/launch/description.launch" >
  </include>

  <!-- Load controller configuration -->
  <rosparam command="load" file="$(find husky_control)/config/control.yaml" />
  <!-- Spawn controllers -->
  <node name="base_controller_spawner" pkg="controller_manager" type="spawner"
        args="husky_joint_publisher husky_velocity_controller"/>
  <rosparam param="wheel_radius_multiplier" ns="husky_velocity_controller" subst_value="True">
        $(optenv HUSKY_WHEEL_MULTIPLIER 1.0)
  </rosparam>

  
  <!-- Start EKF for localization -->
  <group if="$(arg enable_ekf)" >
    <node pkg="robot_localization" type="ekf_localization_node" name="ekf_localization">
      <rosparam command="load" file="$(find husky_dwa_navigation)/config/localization_ouster.yaml" />
    </node>
  </group>



  <node pkg="interactive_marker_twist_server" type="marker_server" name="twist_marker_server" output="screen">
    <param name="link_name" value="base_link" />
  </node>

  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
  <node pkg="twist_mux" type="twist_mux" name="twist_mux">
    <rosparam command="load" file="$(find husky_control)/config/twist_mux.yaml" />
    <remap from="cmd_vel_out" to="husky_velocity_controller/cmd_vel"/>
  </node>

  <!-- Override the default control parameters, see config/empty.yaml for default. -->
  <rosparam command="load" file="$(arg config_extras)" subst_value="true" />


  <!-- 직접 husky_description과 velodyne 설정 로드 -->
  <param name="robot_description" command="$(find xacro)/xacro '$(find husky_custom_description)/urdf/custom_description_ouster_gps.urdf.xacro'" />
  
  <!-- 로봇 스폰-->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model"
        output = "screen"
        args="-urdf -model husky -param robot_description -z 1" /> 

  <!-- RViz 시작 -->
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find husky_custom_gazebo)/rviz/husky_ouster_gps.rviz" />
  
</launch>